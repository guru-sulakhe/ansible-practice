name: configuring backend server
hosts: backend.guru97s.cloud
become: yes
vars:
  login_host: db.guru97s.cloud
  mysql_root_password: "ExpenseApp@1"
tasks:
  - name: disable nodejs
    ansible.builtin.command: dnf module disable nodejs -y

  - name: enabling nodejs:20 version
    ansible.builtin.command: dnf module enable nodejs:20 -y

  - name: installing nodejs
    ansible.builtin.dnf:
      name: "{{item}}"
      state: installed
    loop: 
      - nodejs
      - mysql

  - name: adding user expense
    ansible.builtin.user:
      name: expense

  - name: creating app directory
    ansible.built.file:
      path: /app
      state: directory

  - name: downloading backend code
    ansible.builtin.get_url:
      url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
      dest: /tmp/backend.zip

  - name: unzip backend code
    ansible.builtin.unarchive:
      src: /tmp/backend.zip
      dest: /app
      remote_src: yes

  - name: installing nodejs dependencies
    ansible.builtin.command: npm install
    args: 
      chdir: /app

  - name: copy backend service 
    ansible.builtin.copy:
      src: backend.service
      dest: /etc/systemd/system/backend.service

  - name: downloading python mysql dependencies
    ansible.builtin.pip:
      name:
        - PyMySQL
        - cryptography
      executable: pip3.9

  - name: importing mysql db data
    ansible.builtin.mysql_db:
      login_host: "{{login_host}}"
      login_user: root
      login_password: "{{mysql_root_password}}"
      target: /app/schema/backend.sql
      state: import
      name: all

  - name: daemon reload service
    ansible.builtin.systemd_service:
      daemon_reload: true

  - name: start and enable backend service
    ansible.builtin.service:
      name: backend
      state: started
      enabled: yes

  

